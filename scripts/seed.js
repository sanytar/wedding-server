const { sequelize, Form, Dish, Alcohol } = require('../models');

async function seed() {
  await sequelize.sync({ force: true });

  const dishMap = {};
  for (const name of ['–ú—è—Å–æ', '–†—ã–±–∞']) {
    const [dish] = await Dish.findOrCreate({ where: { name } });
    dishMap[name] = dish;
  }

  const alcoholMap = {};
  for (const name of ['–í–∏–Ω–æ', '–ü–∏–≤–æ', '–í–∏—Å–∫–∏', '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ', '–ö–æ–Ω—å—è–∫']) {
    const [drink] = await Alcohol.findOrCreate({ where: { name } });
    alcoholMap[name] = drink;
  }

  const guests = [
    {
      firstName: '–ò–≤–∞–Ω',
      lastName: '–ü–µ—Ç—Ä–æ–≤',
      comment: '–ë—É–¥—É –±–ª–∏–∂–µ –∫ 7 –≤–µ—á–µ—Ä–∞',
      dish: '–ú—è—Å–æ',
      alcohol: ['–í–∏–Ω–æ', '–ü–∏–≤–æ'],
    },
    {
      firstName: '–ê–Ω–Ω–∞',
      lastName: '–°–∏–¥–æ—Ä–æ–≤–∞',
      comment: '–Ø –∑–∞ —Ä—É–ª—ë–º',
      dish: '–†—ã–±–∞',
      alcohol: [],
    },
    {
      firstName: '–î–º–∏—Ç—Ä–∏–π',
      lastName: '–ò–≤–∞–Ω–æ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: ['–í–∏—Å–∫–∏'],
    },
    {
      firstName: '–û–ª—å–≥–∞',
      lastName: '–ö—É–∑–Ω–µ—Ü–æ–≤–∞',
      comment: '–õ—é–±–ª—é —à–∞–º–ø–∞–Ω—Å–∫–æ–µ!',
      dish: '–†—ã–±–∞',
      alcohol: ['–®–∞–º–ø–∞–Ω—Å–∫–æ–µ', '–í–∏–Ω–æ'],
    },
    {
      firstName: '–ú–∞–∫—Å–∏–º',
      lastName: '–°–º–∏—Ä–Ω–æ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: ['–ü–∏–≤–æ'],
    },
    {
      firstName: '–ï–ª–µ–Ω–∞',
      lastName: '–ú–∏—Ä–æ–Ω–æ–≤–∞',
      comment: '–Ø —Å –º—É–∂–µ–º',
      dish: '–†—ã–±–∞',
      alcohol: ['–í–∏–Ω–æ'],
    },
    {
      firstName: '–°–µ—Ä–≥–µ–π',
      lastName: '–§—ë–¥–æ—Ä–æ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: ['–ö–æ–Ω—å—è–∫'],
    },
    {
      firstName: '–ù–∞—Ç–∞–ª—å—è',
      lastName: '–†–æ–º–∞–Ω–æ–≤–∞',
      comment: '',
      dish: '–†—ã–±–∞',
      alcohol: ['–í–∏–Ω–æ'],
    },
    {
      firstName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä',
      lastName: '–ë–µ–ª–æ–≤',
      comment: '–ü—Ä–∏–¥—É –æ–¥–∏–Ω',
      dish: '–ú—è—Å–æ',
      alcohol: ['–í–∏—Å–∫–∏', '–ü–∏–≤–æ'],
    },
    {
      firstName: '–ú–∞—Ä–∏—è',
      lastName: '–õ–µ–±–µ–¥–µ–≤–∞',
      comment: '',
      dish: '–†—ã–±–∞',
      alcohol: ['–®–∞–º–ø–∞–Ω—Å–∫–æ–µ'],
    },
    {
      firstName: '–†–æ–º–∞–Ω',
      lastName: '–ì—Ä–∏–≥–æ—Ä—å–µ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: ['–ü–∏–≤–æ'],
    },
    {
      firstName: '–Æ–ª–∏—è',
      lastName: '–ö–∏—Ä–∏–ª–ª–æ–≤–∞',
      comment: '–ë–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è, —Å–ø–∞—Å–∏–±–æ!',
      dish: '–†—ã–±–∞',
      alcohol: [],
    },
    {
      firstName: '–ü–∞–≤–µ–ª',
      lastName: '–ú–∞–∫–∞—Ä–æ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: ['–í–∏–Ω–æ'],
    },
    {
      firstName: '–ê–ª–∏—Å–∞',
      lastName: '–í–∞—Å–∏–ª—å–µ–≤–∞',
      comment: '',
      dish: '–†—ã–±–∞',
      alcohol: ['–®–∞–º–ø–∞–Ω—Å–∫–æ–µ'],
    },
    {
      firstName: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω',
      lastName: '–ó—É–µ–≤',
      comment: '–ë—É–¥—É —Å –∂–µ–Ω–æ–π',
      dish: '–ú—è—Å–æ',
      alcohol: ['–ü–∏–≤–æ', '–ö–æ–Ω—å—è–∫'],
    },
    {
      firstName: '–ò—Ä–∏–Ω–∞',
      lastName: '–¢–∏—Ö–æ–Ω–æ–≤–∞',
      comment: '',
      dish: '–†—ã–±–∞',
      alcohol: ['–í–∏–Ω–æ'],
    },
    {
      firstName: '–í–∏–∫—Ç–æ—Ä',
      lastName: '–®–µ—Å—Ç–∞–∫–æ–≤',
      comment: '',
      dish: '–ú—è—Å–æ',
      alcohol: [],
    },
    {
      firstName: '–¢–∞—Ç—å—è–Ω–∞',
      lastName: '–ö–∞–ª–∏–Ω–∏–Ω–∞',
      comment: '–ú–æ–∂–Ω–æ —è –≤–æ–∑—å–º—É +1?',
      dish: '–†—ã–±–∞',
      alcohol: ['–®–∞–º–ø–∞–Ω—Å–∫–æ–µ'],
    }
  ]

  for (const guest of guests) {
    const form = await Form.create({
      firstName: guest.firstName,
      lastName: guest.lastName,
      comment: guest.comment,
      DishId: dishMap[guest.dish].id,
    });

    console.log('üí° –¢–∏–ø –º–µ—Ç–æ–¥–∞:', typeof form.setAlcohols);

    const alcoholIds = guest.alcohol.map(name => alcoholMap[name].id);
    await form.setAlcohols(alcoholIds) // ‚úÖ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–æ—á–Ω–æ –µ—Å—Ç—å
  }

  console.log('‚úÖ –°–∏–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  console.log('üß© –°–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ Form:', Object.keys(Form.associations))
console.log('üß© Form.prototype –º–µ—Ç–æ–¥—ã:', Object.getOwnPropertyNames(Object.getPrototypeOf(Form.build())))

  process.exit();
}

seed().catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
  process.exit(1);
});